node{
    withEnv([
        "branch=${env.branch}",
        "IS_OFFICIAL_RELEASE=false",
        "date=current",
        "timezone=-0500",
        "OS_VER=${env.OS_VER}",
        "TFTP_STATIC_FILES=${env.TFTP_STATIC_FILES}",
        "HTTP_STATIC_FILES=${env.HTTP_STATIC_FILES}",
        "USE_VCOMPUTE=${env.USE_VCOMPUTE}",
        "TESTS=${env.TESTS}",
        "OVA_POST_TESTS=${env.OVA_POST_TESTS}",
        "BINTRAY_SUBJECT=${env.BINTRAY_SUBJECT}",
        "CI_BINTRAY_SUBJECT=${env.CI_BINTRAY_SUBJECT}",
        "PUBLISH=${env.PUBLISH}"
    ]){
        deleteDir()
        checkout scm
        def shareMethod = load("jobs/ShareMethod.groovy")
        try{
            stage("Generate Manifest"){
                // Generate a manifest file according to the branch, date and timezone parameters if manifest file url is null
                if("${MANIFEST_FILE_URL}" == null || "${MANIFEST_FILE_URL}" == "null" || "${MANIFEST_FILE_URL}" == ""){
                    timestamps{
                        withEnv([
                            "branch=${env.branch}",
                            "date=current",
                            "timezone=-0500"
                        ]){
                            sh '''#!/bin/bash -ex
                            pushd $WORKSPACE
                            ./build-config/build-release-tools/HWIMO-BUILD build-config/build-release-tools/application/generate_manifest.py \
                            --branch "$branch" \
                            --date "$date" \
                            --timezone "$timezone" \
                            --builddir b \
                            --force \
                            --jobs 8

                            arrBranch=($(echo $branch | tr "/" "\n"))
                            slicedBranch=${arrBranch[-1]}
                            manifest_file=$(find -maxdepth 1 -name "$slicedBranch-[0-9]*" -printf "%f\n")
                            mv $manifest_file manifest
                            '''
                        }
                    }
                }
                else{
                    sh 'curl -L $MANIFEST_FILE_URL -o manifest'
                }
                // back to master-ci orig
            }
            stage("POST Manifest DO"){
                // def manifest_name=env.MANIFEST_FILE_URL.tokenize('/')[-1];
                def manifest_name=${MANIFEST_FILE_URL}.tokenize('/')[-1];
                currentBuild.description = "<a href=${MANIFEST_FILE_URL}>${manifest_name}</a>";
                shareMethod.downloadManifest(MANIFEST_FILE_URL, manifest_name)

                stash name: "masterci_manifest", includes: "${manifest_name}"
                env.stash_manifest_name = "masterci_manifest"
                env.stash_manifest_path = "${manifest_name}"
            }
            stage("post post EH"){
                def repo_dir = pwd()
                def TESTS = "${env.TESTS}"
                def test_type = "manifest"
            }
            stage("post last DO"){
                Boolean create_tag = false
                // Boolean publish = PUBLISH.toBoolean()
                Boolean publish = false
                shareMethod.buildAndPublish(publish, create_tag, repo_dir)
            }
        } finally{
            shareMethod.sendResult(false, false)
        }
    }
}
